import cs from '../wrapper';
/*
// prettier-ignore
const buffer = [
  0x48, 0x8d, 0x05, 0x00, 0x00, 0x00, 0x00, // lea rax, [rip]
  0x48, 0x83, 0xec, 0x28, // sub rsp, 0x28
  0x48, 0x89, 0x44, 0x24, 0x18, // mov QWORD PTR [rsp+0x18], rax
  0x48, 0x89, 0x54, 0x24, 0x20, // mov QWORD PTR [rsp+0x20], rdx
  0x31, 0xf6, // xor esi, esi
  0x48, 0x89, 0x74, 0x24, 0x08, // mov QWORD PTR [rsp+0x8], rsi
  0x89, 0xf7, // mov edi, esi
  0x89, 0xd6, // mov esi, edx
  0x89, 0xca, // mov edx, ecx
  0x48, 0x8d, 0x74, 0x24, 0x20, // lea rsi, [rsp+0x20]
  0x48, 0x8d, 0x4c, 0x24, 0x18, // lea rcx, [rsp+0x18]
  0x48, 0x89, 0xe8, // mov rax, rbp
  0xff, 0x15, 0x00, 0x00, 0x00, 0x00, // call QWORD PTR [rip]
  0x48, 0x8b, 0x4c, 0x24, 0x18, // mov rcx, QWORD PTR [rsp+0x18]
  0x48, 0x8b, 0x54, 0x24, 0x20, // mov rdx, QWORD PTR [rsp+0x20]
  0x48, 0x81, 0xc4, 0x28, 0x00, 0x00, 0x00, // add rsp, 0x28
  0xc3, 0x90, // NOP
  0xb8, 0x01, 0x00, 0x00, 0x00, // MOV EAX, 1
  0xc3, // RET
  0xe8, 0xfd, 0xff, 0xff, 0xff, // CALL -3
  0x83, 0xec, 0x04, // SUB ESP, 4
  0x8b, 0x45, 0x08, // MOV EAX, DWORD PTR [EBP+8]
  0x89, 0x5d, 0xfc, // MOV DWORD PTR [EBP-4], EBX
  0x83, 0xc0, 0x0f, // ADD EAX, 0F
  0xc7, 0x05, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, // MOV DWORD PTR [0x4], 5
  0xeb, 0xfe, // JMP -2
  0x81, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x83, 0xec, 0x04, // SUB ESP, 4
  0x81, 0xed, 0x30, 0x00, 0x00, 0x00,
];*/

const buffer = [
  0x01, 0xac, 0x88, 0x40, 0x81, 0xac, 0x88, 0x43, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x90, 0x32, 0x96, 0x02, 0x80, 0x46, 0x9e, 0x05, 0x3c, 0x83, 0xe6, 0x0b, 0x0c,
  0x8b, 0x24,
];
const offset = 0x1000;
const d = new cs.Capstone(cs.ARCH_TMS320C64X, cs.MODE_BIG_ENDIAN);
d.option(cs.OPT_DETAIL, true);
const instructions = d.disasm(buffer, offset);

// Display results;
instructions.forEach(function (instr) {
  console.log(require("util").inspect(instr, { depth: null }));
});

d.close();
